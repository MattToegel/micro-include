// ...existing code...
const fs = require('fs');
const path = require('path');
const Terser = require('terser');

(async () => {
    try {
        // Resolve paths relative to the project root (one level up from this script)
        const projectRoot = path.resolve(__dirname, '..');
        const inputPath = path.join(projectRoot, 'docs', 'microinclude.js');
        const outputPath = path.join(projectRoot, 'docs', 'microinclude.min.js');

        // Read the original microinclude.js file
        const code = fs.readFileSync(inputPath, 'utf8');

        // Minify the code
        const result = await Terser.minify(code, { compress: true, mangle: true });

        if (result.error) {
            throw result.error;
        }

        // Write the minified code to microinclude.min.js
        const banner = '/* microinclude.min.js — minified — generated by scripts/minify.js */\n';
        fs.writeFileSync(outputPath, banner + result.code, 'utf8');

        console.log('Minification successful! Output written to', outputPath);
    } catch (error) {
        console.error('Error during minification:', error);
        process.exitCode = 1;
    }
})();